name: DataMiner CICD NuGet Solution

on:
  push:
    branches: []
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+-**"

  workflow_dispatch:

jobs:
  ubuntu-tests:
    name: Run all tests on Ubuntu
    runs-on: ubuntu-latest
    env:
      azure-key-vault-certificate: ${{ secrets.AZURE_KEY_VAULT_CERTIFICATE }}
      azure-key-vault-url: ${{ secrets.AZURE_KEY_VAULT_URL }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

    steps:
      - uses: actions/checkout@v4
        
      - name: Test
        run: dotnet test -c Release --filter TestCategory!=Windows
        

  dotnet-test:
    name: Run Integration Tests
    runs-on: windows-latest
    env:
      azure-key-vault-certificate: ${{ secrets.AZURE_KEY_VAULT_CERTIFICATE }}
      azure-key-vault-url: ${{ secrets.AZURE_KEY_VAULT_URL }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

    steps:
      - uses: actions/checkout@v4

      - name: Integration Tests
        run: dotnet test -c Release --filter TestCategory=IntegrationTest

  CICD:
    needs: [ubuntu-tests, dotnet-test]
    uses: SkylineCommunications/_ReusableWorkflows/.github/workflows/NuGet Solution Master Workflow.yml@main
    with:
      referenceName: ${{ github.ref_name }}
      runNumber: ${{ github.run_number }}
      referenceType: ${{ github.ref_type }}
      repository: ${{ github.repository }}
      owner: ${{ github.repository_owner }}
      sonarCloudProjectName: SkylineCommunications_Skyline.DataMiner.CICD.Tools.PackageSign
    secrets:
      sonarCloudToken: ${{ secrets.SONAR_TOKEN }}
      pfxPassword: ${{ secrets.PFXPASSWORD }}
      nugetApiKey: ${{ secrets.NUGETAPIKEY }}


  validate_skyline_quality_gate:
    name: Skyline Quality Gate 
    runs-on: ubuntu-latest
    outputs:
      quality: ${{ steps.quality-step.outputs.results }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

          
      - name: Install NuGetPreBuildApplyBranchOrTag
        run: dotnet tool install Skyline.DataMiner.CICD.Tools.NuGetPreBuildApplyBranchOrTag --global

      - name: Find .sln file
        id: findSlnFile        
        run: |
          echo solutionFilePath=$(find . -type f -name '*.sln' | sort -r | head -n 1) >> $GITHUB_OUTPUT
        shell: bash  

      - name: Apply Branch and output path for pre-release NuGet
        run: NuGetPreBuildApplyBranchOrTag --workspace ${{ github.workspace }} --tag " " --branch "${{ github.ref_name }}" --build ${{ github.run_number }} --nugetResultFolder "${{ github.workspace }}/_NuGetResults" --solution-filepath "${{ steps.findSlnFile.outputs.solutionFilePath }}"

      - name: Building
        run: dotnet build -p:DefineConstants="DCFv1%3BDBInfo%3BALARM_SQUASHING" --configuration Release -nodeReuse:false
    
      - uses: actions/upload-artifact@v4
        with:
          name: NugetPackages
          path: "${{ github.workspace }}/_NuGetResults"

        # Signing cannot be done from linux environment (https://github.com/dotnet/runtime/issues/48794)
  sign:
        # Don't run the signing when dependabot branch/pull request
        if: ${{ github.actor != 'dependabot[bot]' }}
        # The type of runner that the job will run on
        runs-on: ubuntu-latest
        needs: validate_skyline_quality_gate
        env: 
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        steps:
          - name: Download Unsigned NuGet
            id: downloadUnsignedNuget
            uses: actions/download-artifact@v4
            with:
              name: NugetPackages
              path: _NuGetResults
    
          - name: Install dotnet sign
            run: dotnet tool install sign --global --version 0.9.1-beta.24529.1
          
          - name: Sign NuGet Package
            run: |       
              IFS=$'\n'
              sign code azure-key-vault "_NuGetResults/**/*.nupkg" --publisher-name "Skyline Communications" --description "Skyline Signing" --description-url "https://www.skyline.be/" --azure-key-vault-certificate "Skyline-CodeSigning" --azure-key-vault-url "https://kv-slc-codesigning.vault.azure.net/" --output "_SignedNuGetResults"
              unset IFS    
            shell: bash
            
          - uses: actions/upload-artifact@v4
            with:
              name: SignedNugetPackages
              path: "${{ github.workspace }}/_SignedNuGetResults"